#!/usr/bin/env python3.3
# -*- coding: utf8 -*-
#
# Read input from NMap and use the information from cve-search to find
#  potential vulnerabilities in the recognized systems and their services

# Copyright (c) 2015	NorthernSec
# Copyright (c)	2015	Pieter-Jan Moreels
# This software is licensed under the Original BSD License

# Imports
import os
import sys
runpath=os.path.dirname(os.path.realpath(__file__))
sys.path.append(os.path.join(runpath, '..'))

import re

from urllib.request import urlopen

import argparse
import json
import urllib

from datetime import datetime

from lib.Config import Configuration
from lib.Toolkit import writeJson
from bin.converter import parseNMap

def send_request(host,port,c,encode,rem,copied):
  if c in copied:
    data=copied[c]
    return data,encode,copied
  if rem:
    # Must contain digits
    regex = re.compile('.*[0-9]+')
    if not regex.match(c):
      print("Ignoring CPE %s"%(c))
      return ([],encode,copied)
  if encode == False:
    ret = urlopen('http://%s:%s/api/cvefor/%s'%(host,port,c))
  else:
    cEnc=urllib.parse.quote_plus(c).lower()
    try:
      ret = urlopen('http://%s:%s/api/cvefor/%s'%(host,port,cEnc))
    except Exception as e:
      print("Unable to connect with URL encoding, trying without")
      ret = urlopen('http://%s:%s/api/cvefor/%s'%(host,port,c))
      encode=False
  data = ret.read().decode('utf8')
  copied[c]=data
  return data,encode,copied

def enhance(scan,remove):
  host,port=Configuration.getCVESearch()
  encode=True
  copied={}
  for system in scan['systems']:
    cpe=system['cpes'] if 'cpes' in system else None
    if cpe:
      cpes=[]
      for c in cpe:
        data,encode,copied=send_request(host,port,c,encode,remove,copied)
        cpes.append({'cpe':c, 'cves':json.loads(str(data))})
      system['cpes']=cpes
      #TODO get possible dpe info and store in dpe
    for service in system['services']:
      if 'cpe' in service:
        c=service["cpe"]
        data,encode,copied=send_request(host,port,c,encode,remove,copied)
        service['cves']=json.loads(str(data))
      #TODO get dpe info for service
  scan['enhanced']={"time": int(datetime.now().strftime('%s'))}
  return scan


if __name__ == '__main__':
  # argument parser
  description='''Read input from NMap and use the information from
                 cve-search to find potential vulnerabilities in the
                 recognized systems and their services'''
  parser = argparse.ArgumentParser(description=description)
  parser.add_argument('-j', metavar='json',   type=str, help='Read Json file in Nmap2CVE format' )
  parser.add_argument('-x', metavar='xml',    type=str, help='Read NMap XML file' )
  parser.add_argument('-r', action='store_true', help='Remove likely false positives')
  parser.add_argument('out', metavar='output', type=str, help='Output file')
  args = parser.parse_args()

  # input
  if not args.x and not args.j: sys.exit("No input selected!")
  if args.x:
    syslist=parseNMap(file=args.x)
  elif args.j:
    try:
      syslist=json.loads(open(args.j).read())
    except:
      sys.exit("Invalid JSon format!")
  #output

  #CVE-Scan magic
  try:
    syslist=enhance(syslist,args.r)
    writeJson(args.out, syslist)
  except Exception as e:
    print(e)
    sys.exit("Could not connect to the CVE-Search API on %s:%s"%(Configuration.getCVESearch()))
